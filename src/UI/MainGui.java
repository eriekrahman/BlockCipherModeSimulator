/*
 * MainGui.java
 *
 * Created on September 27, 2006, 11:45 AM
 */

package UI;

import Encryption.CBC;
import Encryption.CFB;
import Encryption.ECB;
import FileUtils.FileLoader;
import FileUtils.FileSaver;
import java.awt.Component;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.lang.Integer;


public class MainGui extends javax.swing.JFrame {
    
    /** Creates new form MainGui */
    private String mode = new String();
    public File CurrFile = new File("");   
    public static File ResultFile = new File("");
    private Component frame;
    
    public MainGui() {
        initComponents();
        this.setLocationRelativeTo(null);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        FC = new javax.swing.JFileChooser();
        d = new javax.swing.JDesktopPane();
        i = new javax.swing.JInternalFrame();
        bG = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        field = new javax.swing.JTextArea();
        keyTitle = new javax.swing.JLabel();
        keyField = new javax.swing.JTextField();
        Status = new javax.swing.JLabel();
        fileStatus = new javax.swing.JLabel();
        keyTitle1 = new javax.swing.JLabel();
        Menu = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        open = new javax.swing.JMenuItem();
        save = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        quit = new javax.swing.JMenuItem();
        cipherMenu = new javax.swing.JMenu();
        encrypt = new javax.swing.JMenuItem();
        decrypt = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        ebc = new javax.swing.JRadioButtonMenuItem();
        cbc = new javax.swing.JRadioButtonMenuItem();
        cfb = new javax.swing.JRadioButtonMenuItem();
        helpMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        jMenuItem2 = new javax.swing.JMenuItem();

        i.setVisible(true);

        org.jdesktop.layout.GroupLayout iLayout = new org.jdesktop.layout.GroupLayout(i.getContentPane());
        i.getContentPane().setLayout(iLayout);
        iLayout.setHorizontalGroup(
            iLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 0, Short.MAX_VALUE)
        );
        iLayout.setVerticalGroup(
            iLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 0, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Block Cipher Mode Simulator");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        field.setColumns(20);
        field.setRows(5);
        field.setEnabled(false);
        jScrollPane1.setViewportView(field);

        keyTitle.setText(" Key");

        keyTitle1.setText("Content");

        fileMenu.setText("File");

        open.setMnemonic('O');
        open.setText("Open");
        open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActionPerformed(evt);
            }
        });
        fileMenu.add(open);

        save.setMnemonic('S');
        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        fileMenu.add(save);
        fileMenu.add(jSeparator1);

        quit.setMnemonic('Q');
        quit.setText("Quit");
        quit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitActionPerformed(evt);
            }
        });
        fileMenu.add(quit);

        Menu.add(fileMenu);

        cipherMenu.setText("Cipher");
        cipherMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cipherMenuActionPerformed(evt);
            }
        });

        encrypt.setMnemonic('E');
        encrypt.setText("Encrypt");
        encrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptActionPerformed(evt);
            }
        });
        cipherMenu.add(encrypt);

        decrypt.setMnemonic('D');
        decrypt.setText("Decrypt");
        decrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptActionPerformed(evt);
            }
        });
        cipherMenu.add(decrypt);
        cipherMenu.add(jSeparator2);

        bG.add(ebc);
        ebc.setText("ECB");
        ebc.setActionCommand("item");
        ebc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ebcActionPerformed(evt);
            }
        });
        cipherMenu.add(ebc);

        bG.add(cbc);
        cbc.setText("CBC");
        cbc.setActionCommand("item");
        cbc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbcActionPerformed(evt);
            }
        });
        cipherMenu.add(cbc);

        bG.add(cfb);
        cfb.setText("CFB");
        cfb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cfbActionPerformed(evt);
            }
        });
        cipherMenu.add(cfb);

        Menu.add(cipherMenu);

        helpMenu.setText("Help");

        jMenuItem1.setText("Help");
        jMenuItem1.setActionCommand("Help");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowHelp(evt);
            }
        });
        helpMenu.add(jMenuItem1);
        helpMenu.add(jSeparator3);

        jMenuItem2.setText("About");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowAbout(evt);
            }
        });
        helpMenu.add(jMenuItem2);

        Menu.add(helpMenu);

        setJMenuBar(Menu);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 498, Short.MAX_VALUE)
                        .addContainerGap())
                    .add(layout.createSequentialGroup()
                        .add(keyTitle1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 54, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(fileStatus)
                        .add(38, 38, 38))
                    .add(layout.createSequentialGroup()
                        .add(keyTitle)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(keyField)
                        .addContainerGap())
                    .add(layout.createSequentialGroup()
                        .add(Status, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(keyTitle1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 186, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(keyTitle, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(keyField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(Status, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(fileStatus))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ShowHelp(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowHelp
        new Help().setVisible(true);
    }//GEN-LAST:event_ShowHelp
    
    private void cipherMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cipherMenuActionPerformed
    }//GEN-LAST:event_cipherMenuActionPerformed

    private void ShowAbout(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowAbout
        new About().setVisible(true);
    }//GEN-LAST:event_ShowAbout
     
    private void decryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptActionPerformed
        try {
            DataInputStream cipherTeks = new DataInputStream(new FileInputStream(this.CurrFile));
            cipherTeks.readInt();
            int mod = cipherTeks.readInt();
            if (mod == 100){
                this.mode = "ecb";
            }
            else if (mod == 200){
                this.mode = "cbc";
            }
            else if (mod == 300){
                this.mode = "cfb";
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        
        if (this.mode.equals(""))
            JOptionPane.showMessageDialog(this, "Please choose decryption mode|", "Warning", JOptionPane.WARNING_MESSAGE);
        else if (this.keyField.getText().equals(""))
            JOptionPane.showMessageDialog(this, "Please specify a Key!", "Warning", JOptionPane.WARNING_MESSAGE);
        else if (!this.CurrFile.exists())
            JOptionPane.showMessageDialog(this, "Please specify a File!", "Warning", JOptionPane.WARNING_MESSAGE);
        else {
            JOptionPane.showMessageDialog(this, "Decrypting with " + this.mode + ", key = " + keyField.getText(), "Decrypt!", JOptionPane.PLAIN_MESSAGE);            
            if (this.mode.equals("ecb")){
                ResultFile = ECB.Decrypt(this.CurrFile, keyField.getText());
                field.setText("");
                Thread loader = new FileLoader(ResultFile, field.getDocument());
                loader.start();
                JOptionPane.showMessageDialog(this,"Decrypted succesfully!","Done!",JOptionPane.PLAIN_MESSAGE);
            }
            if (this.mode.equals("cbc")){
                ResultFile = CBC.Decrypt(this.CurrFile, keyField.getText());
                field.setText("");
                Thread loader = new FileLoader(ResultFile, field.getDocument());
                loader.start(); 
                JOptionPane.showMessageDialog(this,"Decrypted succesfully!","Done!",JOptionPane.PLAIN_MESSAGE);
            }
            if (this.mode.equals("cfb")){
                ResultFile = CFB.Decrypt(this.CurrFile, keyField.getText());
                field.setText("");
                Thread loader = new FileLoader(ResultFile, field.getDocument());
                loader.start(); 
                JOptionPane.showMessageDialog(this, "Decrypted succesfully!", "Done!", JOptionPane.PLAIN_MESSAGE);
            }     
        }
    }//GEN-LAST:event_decryptActionPerformed
    
    private void encryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptActionPerformed
        if (this.mode.equals(""))
            JOptionPane.showMessageDialog(this, "Please choose encryption mode!", "Warning", JOptionPane.WARNING_MESSAGE);
        else if (this.keyField.getText().equals(""))
            JOptionPane.showMessageDialog(this, "Please specify a Key!","Warning", JOptionPane.WARNING_MESSAGE);
        else if (this.keyField.getText().length() < 8)
            JOptionPane.showMessageDialog(this, "Key must be more than 8 character", "Warning", JOptionPane.WARNING_MESSAGE);
        else if (!this.CurrFile.exists())
            JOptionPane.showMessageDialog(this, "Please specify a File!", "Warning", JOptionPane.WARNING_MESSAGE);
        else{
            JOptionPane.showMessageDialog(this, "Encrypting with " + this.mode + ", key = " + keyField.getText(), "Encrypt!", JOptionPane.PLAIN_MESSAGE);
            if (this.mode.equals("ecb")){
                ResultFile = ECB.Encrypt(this.CurrFile, keyField.getText());
                field.setText("");
                Thread loader = new FileLoader(ResultFile,field.getDocument());
                loader.start();
                JOptionPane.showMessageDialog(this, "Encrypted succesfully!","Done!", JOptionPane.PLAIN_MESSAGE);
            }
            if (this.mode.equals("cbc")){
                ResultFile = CBC.Encrypt(this.CurrFile, keyField.getText());
                field.setText("");
                Thread loader = new FileLoader(ResultFile, field.getDocument());
                loader.start(); 
                JOptionPane.showMessageDialog(this, "Encrypted succesfully!", "Done!", JOptionPane.PLAIN_MESSAGE);
            }
            if (this.mode.equals("cfb")){
                int Bit  = 4;
                try{
                    while (true){   
                        String s = (String)JOptionPane.showInputDialog(frame, "Masukkan jumlah bit :", "Input bit", JOptionPane.PLAIN_MESSAGE, null, null, "4");
                        Bit = Integer.parseInt(s);
                        if ((Bit>0) && (Bit <= keyField.getText().length()))
                            break;
                        else
                            JOptionPane.showMessageDialog(this, "Jumlah bit yang dimasukkan untuk kunci yang bersangkutan \n harus bernilai 1 - " + keyField.getText().length(), "Warning", JOptionPane.PLAIN_MESSAGE);
                    }
                    ResultFile = CFB.Encrypt(this.CurrFile, keyField.getText(), Bit);
                    field.setText("");
                    Thread loader = new FileLoader(ResultFile, field.getDocument());
                    loader.start();
                } catch (Exception e){
                    e.getMessage();
                }
                JOptionPane.showMessageDialog(this, "Encrypted succesfully!", "Done!", JOptionPane.PLAIN_MESSAGE);
            }
        }   
    }//GEN-LAST:event_encryptActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
      int result = FC.showSaveDialog(this);
      if (result == JFileChooser.APPROVE_OPTION) {
            File fileSelected = FC.getSelectedFile();
            FileSaver saver = new FileSaver();
            saver.Save(this.ResultFile, fileSelected);
            fileStatus.setText(((FC.getSelectedFile( )!=null)?
            FC.getSelectedFile( ).getName( ): "Nothing") + " saved ");
      }
       else{
          fileStatus.setText("Cancel to save file.");
      }
                                     
    }//GEN-LAST:event_saveActionPerformed

    private void cfbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cfbActionPerformed
        this.mode = "cfb";
        Status.setText("CFB mode selected");        
    }//GEN-LAST:event_cfbActionPerformed

    private void cbcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbcActionPerformed
        this.mode = "cbc";
        Status.setText("CBC mode selected");
    }//GEN-LAST:event_cbcActionPerformed

    private void ebcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ebcActionPerformed
        this.mode = "ecb";
        Status.setText("ECB mode selected");
    }//GEN-LAST:event_ebcActionPerformed

    private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed
        if (this.CurrFile.exists()){
            field.setText("");
        }
        
        int result = FC.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
           File fileSelected = FC.getSelectedFile();
           this.CurrFile = fileSelected;
            if (fileSelected.isFile() && fileSelected.canRead()) {
                Thread loader = new FileLoader(fileSelected, field.getDocument());
		loader.start();
	   } else {
                fileStatus.setText("Could not open file. Error while opening file");
            }
        }
         else {
             fileStatus.setText("Cancel to open file.");
        }          
    }//GEN-LAST:event_openActionPerformed

    private void quitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_quitActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainGui().setVisible(true);
            }
        });
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser FC;
    private javax.swing.JMenuBar Menu;
    private javax.swing.JLabel Status;
    private javax.swing.ButtonGroup bG;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButtonMenuItem cbc;
    private javax.swing.JRadioButtonMenuItem cfb;
    private javax.swing.JMenu cipherMenu;
    private javax.swing.JDesktopPane d;
    private javax.swing.JMenuItem decrypt;
    private javax.swing.JRadioButtonMenuItem ebc;
    private javax.swing.JMenuItem encrypt;
    public static javax.swing.JTextArea field;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel fileStatus;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JInternalFrame i;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextField keyField;
    private javax.swing.JLabel keyTitle;
    private javax.swing.JLabel keyTitle1;
    private javax.swing.JMenuItem open;
    private javax.swing.JMenuItem quit;
    private javax.swing.JMenuItem save;
    // End of variables declaration//GEN-END:variables
    
}
